<?php

//----------------------------------------------------------------------
//
//  Copyright (C) 2015-2017 Artem Rodygin
//
//  This file is part of Linode API Client Library for PHP.
//
//  You should have received a copy of the MIT License along with
//  the library. If not, see <http://opensource.org/licenses/MIT>.
//
//----------------------------------------------------------------------

namespace Linode\Linode;

use Linode\BaseLinodeApi;

/**
 * This class is autogenerated.
 *
 * @version Linode API v3.3
 */
class DiskApi extends BaseLinodeApi
{
    /**
     * @param int    $LinodeID   [required]
     * @param string $Label      [required] The display label for this Disk
     * @param string $Type       [required] The formatted type of this disk.  Valid types are: ext3, ext4, swap, raw
     * @param int    $Size       [required] The size in MB of this Disk.
     * @param bool   $isReadOnly [optional] Enable forced read-only for this Disk
     *
     * @return array
     */
    public function create($LinodeID, $Label, $Type, $Size, $isReadOnly = null)
    {
        return $this->call('linode.disk.create', [
            'LinodeID'   => $LinodeID,
            'Label'      => $Label,
            'Type'       => $Type,
            'Size'       => $Size,
            'isReadOnly' => $isReadOnly,
        ]);
    }

    /**
     * @param int    $LinodeID       [required]
     * @param int    $DistributionID [required] The DistributionID to create this disk from.  Found in avail.distributions()
     * @param string $Label          [required] The label of this new disk image
     * @param int    $Size           [required] Size of this disk image in MB
     * @param string $rootPass       [required] The root (or core) user's password
     * @param string $rootSSHKey     [optional] Optionally sets this string into /root/.ssh/authorized_keys (or /home/core/.ssh/authorized_keys) upon distribution configuration.
     *
     * @return array
     */
    public function createFromDistribution($LinodeID, $DistributionID, $Label, $Size, $rootPass, $rootSSHKey = null)
    {
        return $this->call('linode.disk.createfromdistribution', [
            'LinodeID'       => $LinodeID,
            'DistributionID' => $DistributionID,
            'Label'          => $Label,
            'Size'           => $Size,
            'rootPass'       => $rootPass,
            'rootSSHKey'     => $rootSSHKey,
        ]);
    }

    /**
     * Creates a new disk from a previously imagized disk.
     *
     * @param int    $LinodeID   [required] Specifies the Linode to deploy on to
     * @param int    $ImageID    [required] The ID of the frozen image to deploy from
     * @param string $Label      [optional] The label of this new disk image
     * @param int    $size       [optional] The size of the disk image to creates. Defaults to the minimum size required for the requested image
     * @param string $rootPass   [optional] Optionally sets the root password at deployment time. If a password is not provided the existing root password of the frozen image will not be modified
     * @param string $rootSSHKey [optional] Optionally sets this string into /root/.ssh/authorized_keys upon image deployment
     *
     * @return array
     */
    public function createFromImage($LinodeID, $ImageID, $Label = null, $size = null, $rootPass = null, $rootSSHKey = null)
    {
        return $this->call('linode.disk.createfromimage', [
            'LinodeID'   => $LinodeID,
            'ImageID'    => $ImageID,
            'Label'      => $Label,
            'size'       => $size,
            'rootPass'   => $rootPass,
            'rootSSHKey' => $rootSSHKey,
        ]);
    }

    /**
     * @param int    $LinodeID                [required]
     * @param int    $StackScriptID           [required] The StackScript to create this image from
     * @param string $StackScriptUDFResponses [required] JSON encoded name/value pairs, answering this StackScript's User Defined Fields
     * @param int    $DistributionID          [required] Which Distribution to apply this StackScript to.  Must be one from the script's DistributionIDList
     * @param string $Label                   [required] The label of this new disk image
     * @param int    $Size                    [required] Size of this disk image in MB
     * @param string $rootPass                [required] The root user's password
     * @param string $rootSSHKey              [optional] Optionally sets this string into /root/.ssh/authorized_keys upon distribution configuration.
     *
     * @return array
     */
    public function createFromStackScript($LinodeID, $StackScriptID, $StackScriptUDFResponses, $DistributionID, $Label, $Size, $rootPass, $rootSSHKey = null)
    {
        return $this->call('linode.disk.createfromstackscript', [
            'LinodeID'                => $LinodeID,
            'StackScriptID'           => $StackScriptID,
            'StackScriptUDFResponses' => $StackScriptUDFResponses,
            'DistributionID'          => $DistributionID,
            'Label'                   => $Label,
            'Size'                    => $Size,
            'rootPass'                => $rootPass,
            'rootSSHKey'              => $rootSSHKey,
        ]);
    }

    /**
     * @param int $LinodeID [required]
     * @param int $DiskID   [required]
     *
     * @return array
     */
    public function delete($LinodeID, $DiskID)
    {
        return $this->call('linode.disk.delete', [
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ]);
    }

    /**
     * Performs a bit-for-bit copy of a disk image.
     *
     * @param int $LinodeID [required]
     * @param int $DiskID   [required]
     *
     * @return array
     */
    public function duplicate($LinodeID, $DiskID)
    {
        return $this->call('linode.disk.duplicate', [
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ]);
    }

    /**
     * Status values are 1: Ready and 2: Being Deleted.
     *
     * @param int $LinodeID [required]
     * @param int $DiskID   [optional]
     *
     * @return array
     */
    public function getList($LinodeID, $DiskID = null)
    {
        return $this->call('linode.disk.list', [
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
        ]);
    }

    /**
     * Creates a gold-master image for future deployments.
     *
     * @param int    $LinodeID    [required] Specifies the source Linode to create the image from
     * @param int    $DiskID      [required] Specifies the source Disk to create the image from
     * @param string $Label       [optional] Sets the name of the image shown in the base image list, defaults to the source image label
     * @param string $Description [optional] An optional description of the created image
     *
     * @return array
     */
    public function imagize($LinodeID, $DiskID, $Label = null, $Description = null)
    {
        return $this->call('linode.disk.imagize', [
            'LinodeID'    => $LinodeID,
            'DiskID'      => $DiskID,
            'Label'       => $Label,
            'Description' => $Description,
        ]);
    }

    /**
     * @param int $LinodeID [required]
     * @param int $DiskID   [required]
     * @param int $size     [required] The requested new size of this Disk in MB
     *
     * @return array
     */
    public function resize($LinodeID, $DiskID, $size)
    {
        return $this->call('linode.disk.resize', [
            'LinodeID' => $LinodeID,
            'DiskID'   => $DiskID,
            'size'     => $size,
        ]);
    }

    /**
     * @param int    $LinodeID   [optional]
     * @param int    $DiskID     [required]
     * @param string $Label      [optional] The display label for this Disk
     * @param bool   $isReadOnly [optional] Enable forced read-only for this Disk
     *
     * @return array
     */
    public function update($LinodeID, $DiskID, $Label = null, $isReadOnly = null)
    {
        return $this->call('linode.disk.update', [
            'LinodeID'   => $LinodeID,
            'DiskID'     => $DiskID,
            'Label'      => $Label,
            'isReadOnly' => $isReadOnly,
        ]);
    }
}
